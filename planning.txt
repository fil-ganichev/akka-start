Текущие открытые вопросы, доработки

1) Версия Spring в org.lokrusta какая должна быть? Если указываем самую свежую,
   а приложение, использующее org.lokrusta импортит более раннюю?

2) Аналогичный вопрос с прочими библиотеками (например, micrometer) сходит в состав SpringBoot

4) В orElseThrow генерировать свой Exception

5) Реальные! разные примеры конвейеров с CustomApiServerArgsConverter

6) Пример/инструкция удаленного сервера-клиента с TCP-транспортом в OpenShift

8) Пример/инструкция с источником Kafka, приемником БД

9) Максимально удобная интеграция в код: спринг-плагин, средства генерации (сравнивать с OpenApi?)

10) Сейчас все методы Api возвращают CompletableFuture. Можно переделать - указываем аннотации (синхронный, асинхронный),
для всех CallPoint в ApiServerImpl генерируем прокси и прокси уже преобразует вызов используя для асинхрона CompletableFuture
    
11) Реализация Event-взаимодействия (расширение Proxy в ApiServerImpl). Какой транспорт? Если нода недоступна, то потом придет Event? Как это в Spring?

12) Сериализация Exception в транспорте

13) Обязательно исправить замечания checkstyle и idea

14) ApiEngine сделать бином и в нее передавать AppilicationContext

16) DependsOn слишком сложный в ApiServerTest. Требуется рефакторинг   

18) Разобраться с akka streams в кластере: какими средствами организовать кластер (akka cluster, openshift)

19) Можно ли реализовать разветвленные графы?

20) Пример, когда используют дроссели и Circuit Breaker

21) TestApiSinkServer включить в общее Api

22) Мы не можем в методе Api делать агрегацию потоковых данных. Потом подумать над вариантами

23) Обязательно Http-транспорт, транспорт через Кафка?, подключение к БД, Http source

24) Рефакторинг: Определиться с интерфейсами, абстрактными классами, реализацией, аннотациями. 
    Избавиться от преобразований интерйесов в классы, посмотреть todo и комментарии к тестам

25) Рефакторинг: Разделить ApiServerImpl на 2 - вариант с proxy и без

26) Посмотреть про Kafka Streams

27) Распараллеливание mapAsync() и map.async()

29) Логирование каждого этапа в графе akka для debug

30) ObjectMapper в ApiHelper должен подключаться как бин, настраиваемый

31) ErrorListener в ApiEngine (withErrorListener - метод интерфейса ErrorListener). Перехват Throwable вместо Exception.

32) Тесты - в тестах на Exception добавить Listener и проверку, что он вызывается

33) Тесты - тесты по каждой компоненте (ApiServer, ApiSource) в отдельный пакет

34) Тесты - класс TestBase

35) Рефакторинг передачи ApiCallProcessor в транспорт из ApiClient

36) Логирование элементов потока с настройкой уровней

38) Проблема логирования. Как включить log() для каждого элемента потока?

39) Перед каждым разветвлением потока добавлять mapError. При установке errorListener в ApiEngine, передавать его всем элементам

40) ArgsWrapperImpl.apiCallArguments используется и для аргументов вызова и для возврата значения. Очень непрозрачно получается

41) Таймаут у CompletableFuture с результатом. Таймаут серверной обработки

42) Unbind сокетов при закрытии TCP-бинов

43) Использование ConcurrentHashMap в ApiCallProcessor сомнительно

44) Провести самплирование и оптимизацию (особенно ApiServerImpl, где используется reflection)

45) Сценарии тестовых примеров поменять на более реальные. Замена TestApi.split() и Car

46) ApiHelper рефакторинг - вместо набора статических методов Singleton, по другому назвать?